kind: project
metadata:
  name: hvd-doc
spec:
  functions:
  - name: utils
    spec:
      kind: job
      metadata:
        name: utils
        tag: ''
        project: hvd-doc
      spec:
        command: ''
        args: []
        image: mlrun/mlrun
        env: []
        default_handler: ''
        entry_points:
          open_archive:
            name: open_archive
            doc: 'Open a file/object archive into a target directory


              Currently supports zip and tar.gz'
            parameters:
            - name: context
              doc: function execution context
              default: ''
            - name: archive_url
              type: DataItem
              doc: url of archive file
              default: ''
            - name: target_path
              doc: file system path to store extracted files
              default: ''
            - name: refresh
              default: false
            - name: train_size
              default: 0.8
            outputs:
            - default: ''
            lineno: 19
        description: ''
        build:
          functionSourceCode: IyBHZW5lcmF0ZWQgYnkgbnVjbGlvLmV4cG9ydC5OdWNsaW9FeHBvcnRlcgoKaW1wb3J0IG9zCmltcG9ydCB6aXBmaWxlCmltcG9ydCBqc29uCmltcG9ydCBzaHV0aWwKZnJvbSBnbG9iIGltcG9ydCBnbG9iCmZyb20gdGVtcGZpbGUgaW1wb3J0IG1rdGVtcAppbXBvcnQgcGFuZGFzIGFzIHBkCmltcG9ydCBudW1weSBhcyBucApmcm9tIG1scnVuIGltcG9ydCBEYXRhSXRlbQoKZGVmIF9leHRyYWN0X2xhYmVsKGZpbGVuYW1lKToKICAgICAgICByZXR1cm4gb3MucGF0aC5iYXNlbmFtZShmaWxlbmFtZSkuc3BsaXQoJy4nKVswXQoKZGVmIF9leHRyYWN0X2RldGF0c2V0KGksIHBlcl9jbGFzcyk6CiAgICAgICAgcmV0dXJuICd0cmFpbicgaWYgaSA8PSBwZXJfY2xhc3MgZWxzZSAndmFsaWRhdGlvbicKICAgIApkZWYgb3Blbl9hcmNoaXZlKGNvbnRleHQsIAogICAgICAgICAgICAgICAgIGFyY2hpdmVfdXJsOiBEYXRhSXRlbSwKICAgICAgICAgICAgICAgICB0YXJnZXRfcGF0aCwKICAgICAgICAgICAgICAgICByZWZyZXNoPUZhbHNlLAogICAgICAgICAgICAgICAgIHRyYWluX3NpemU9MC44KToKICAgICIiIk9wZW4gYSBmaWxlL29iamVjdCBhcmNoaXZlIGludG8gYSB0YXJnZXQgZGlyZWN0b3J5CiAgICAKICAgIEN1cnJlbnRseSBzdXBwb3J0cyB6aXAgYW5kIHRhci5negogICAgCiAgICA6cGFyYW0gY29udGV4dDogICAgICBmdW5jdGlvbiBleGVjdXRpb24gY29udGV4dAogICAgOnBhcmFtIGFyY2hpdmVfdXJsOiAgdXJsIG9mIGFyY2hpdmUgZmlsZQogICAgOnBhcmFtIHRhcmdldF9wYXRoOiAgZmlsZSBzeXN0ZW0gcGF0aCB0byBzdG9yZSBleHRyYWN0ZWQgZmlsZXMKICAgIDpwYXJhbSBrZXk6ICAgICAgICAgIGtleSBvZiBhcmNoaXZlIGNvbnRlbnRzIGluIGFydGlmYWN0IHN0b3JlCiAgICA6cGFyYW0gdGVzdF9zaXplOiAgICBzZXQgdGhlIHRyYWluIGRhdGFzZXQgc2l6ZSBvdXQgb2YgdG90YWwgZGF0YXNldAogICAgIiIiCiAgICBvcy5tYWtlZGlycyh0YXJnZXRfcGF0aCwgZXhpc3Rfb2s9VHJ1ZSkKICAgIAogICAgYXJjaGl2ZV91cmwgPSBhcmNoaXZlX3VybC5sb2NhbCgpCiAgICAKICAgIGNvbnRleHQubG9nZ2VyLmluZm8oJ0V4dHJhY3RpbmcgemlwJykKICAgIGV4dHJhY3Rpb25fcGF0aCA9IG9zLnBhdGguam9pbih0YXJnZXRfcGF0aCwgJ3RtcCcpCiAgICB6aXBfcmVmID0gemlwZmlsZS5aaXBGaWxlKGFyY2hpdmVfdXJsLCAncicpCiAgICB6aXBfcmVmLmV4dHJhY3RhbGwoZXh0cmFjdGlvbl9wYXRoKQogICAgCiAgICBmaWxlbmFtZXMgPSBbZmlsZSBmb3IgZmlsZSBpbiBnbG9iKGV4dHJhY3Rpb25fcGF0aCArICcvKi8qJykgaWYgZmlsZS5lbmRzd2l0aCgnLmpwZycpXQogICAgCiAgICBmaWxlX2xhYmVscyA9IFtfZXh0cmFjdF9sYWJlbChmaWxlKSBmb3IgZmlsZSBpbiBmaWxlbmFtZXNdCiAgICBsYWJlbHMsIGxhYmVsX2NvdW50cyA9IG5wLnVuaXF1ZShmaWxlX2xhYmVscywgcmV0dXJuX2NvdW50cz1UcnVlKQogICAgZmlsZXMgPSB7YzogW10gZm9yIGMgaW4gbGFiZWxzfQogICAgZm9yIGxhYmVsLCBmaWxlIGluIHppcChmaWxlX2xhYmVscywgZmlsZW5hbWVzKToKICAgICAgICBmaWxlc1tsYWJlbF0uYXBwZW5kKGZpbGUpCiAgICAKICAgIG51bV9maWxlcyA9IGxlbihmaWxlbmFtZXMpCiAgICBudW1fdHJhaW4gPSBpbnQobnAuY2VpbChudW1fZmlsZXMgKiB0cmFpbl9zaXplKSkKICAgIG51bV9zYW1wbGVzX3Blcl9jbGFzcyA9IGludChucC5jZWlsKG51bV90cmFpbiAvIGxlbihsYWJlbHMpKSkKICAgIAogICAgZm9yIGxhYmVsIGluIGxhYmVsczoKICAgICAgICB0cmFpbl9kaXIgPSBvcy5wYXRoLmpvaW4odGFyZ2V0X3BhdGgsICJ0cmFpbiIsIGxhYmVsKQogICAgICAgIHZhbGlkYXRpb25fZGlyID0gb3MucGF0aC5qb2luKHRhcmdldF9wYXRoLCAidmFsaWRhdGlvbiIsIGxhYmVsKQogICAgICAgIG9zLm1ha2VkaXJzKHRyYWluX2RpciwgZXhpc3Rfb2s9VHJ1ZSkKICAgICAgICBvcy5tYWtlZGlycyh2YWxpZGF0aW9uX2RpciwgZXhpc3Rfb2s9VHJ1ZSkKICAgIAogICAgZm9yIGxhYmVsLCBmaWxlbmFtZXMgaW4gZmlsZXMuaXRlbXMoKToKICAgICAgICBmb3IgaSwgZmlsZSBpbiBlbnVtZXJhdGUoZmlsZW5hbWVzKToKICAgICAgICAgICAgc2h1dGlsLm1vdmUoZmlsZSwgb3MucGF0aC5qb2luKHRhcmdldF9wYXRoLCBfZXh0cmFjdF9kZXRhdHNldChpLCBudW1fc2FtcGxlc19wZXJfY2xhc3MpLCBsYWJlbCwgb3MucGF0aC5iYXNlbmFtZShmaWxlKSkpCiAgICBzaHV0aWwucm10cmVlKGV4dHJhY3Rpb25fcGF0aCkKCiAgICBjb250ZXh0LmxvZ2dlci5pbmZvKGYnZXh0cmFjdGVkIGFyY2hpdmUgdG8ge3RhcmdldF9wYXRofScpCiAgICBjb250ZXh0LmxvZ2dlci5pbmZvKGYnRGF0YXNldCBjb250YWlucyB0aGUgbGFiZWxzIHtsYWJlbHN9JykKICAgIGNvbnRleHQubG9nX2FydGlmYWN0KCdjb250ZW50JywgdGFyZ2V0X3BhdGg9dGFyZ2V0X3BhdGgpCgo=
          commands: []
          code_origin: https://github.com/zilbermanor/demos#9bff22537f164feb9aff5c05960129f39a4150d8
      verbose: false
  - name: trainer
    spec:
      kind: mpijob
      metadata:
        name: trainer
        project: hvd-doc
        categories: []
      spec:
        command: /User/doc-demos/demos/image-classification-with-distributed-training/src-tfv2/horovod-training.py
        py_args: []
        mpi_args: []
        image: mlrun/ml-models
        env: []
        description: ''
        replicas: 2
        build:
          commands: []
          code_origin: https://github.com/zilbermanor/demos#9bff22537f164feb9aff5c05960129f39a4150d8
      verbose: false
  - url: hub://tf2_serving
    name: serving
  workflows:
  - name: main
    code: "from kfp import dsl\nfrom mlrun import mount_v3io\n\nfuncs = {}\n\n\ndef\
      \ init_functions(functions: dict, project=None, secrets=None):\n    '''\n  \
      \  This function will run before running the project.\n    It allows us to add\
      \ our specific system configurations to the functions\n    like mounts or secrets\
      \ if needed.\n\n    In this case we will add Iguazio's user mount to our functions\
      \ using the\n    `mount_v3io()` function to automatically set the mount with\
      \ the needed\n    variables taken from the environment. \n    * mount_v3io can\
      \ be replaced with mlrun.platforms.mount_pvc() for \n    non-iguazio mount\n\
      \n    @param functions: <function_name: function_yaml> dict of functions in\
      \ the\n                        workflow\n    @param project: project object\n\
      \    @param secrets: secrets required for the functions for s3 connections and\n\
      \                    such\n    '''\n    for f in functions.values():\n     \
      \   f.apply(mount_v3io())                  # On Iguazio (Auto-mount /User)\n\
      \        # f.apply(mlrun.platforms.mount_pvc()) # Non-Iguazio mount\n      \
      \  \n    functions['serving'].set_env('MODEL_CLASS', 'TFModel')\n    functions['serving'].set_env('IMAGE_HEIGHT',\
      \ '224')\n    functions['serving'].set_env('IMAGE_WIDTH', '224')\n    functions['serving'].set_env('ENABLE_EXPLAINER',\
      \ 'False')\n    functions['serving'].spec.min_replicas = 1\n\n\n@dsl.pipeline(\n\
      \    name='Image classification demo',\n    description='Train an Image Classification\
      \ TF Algorithm using MLRun'\n)\ndef kfpipeline(\n        image_archive='store:///images',\n\
      \        images_dir='/User/artifacts/images',\n        checkpoints_dir='/User/artifacts/models/checkpoints',\n\
      \        model_name='cat_vs_dog_tfv1',\n        epochs=2):\n\n    # step 1:\
      \ download and prep images\n    open_archive = funcs['utils'].as_step(name='download',\n\
      \                                          handler='open_archive',\n       \
      \                                   params={'target_path': images_dir},\n  \
      \                                        inputs={'archive_url': image_archive},\n\
      \                                          outputs=['content'])\n\n    # step\
      \ 2: train the model\n    train_dir = str(open_archive.outputs['content']) +\
      \ '/train'\n    val_dir = str(open_archive.outputs['content']) + '/validation'\n\
      \    train = funcs['trainer'].as_step(name='train',\n                      \
      \               params={'epochs': epochs,\n                                \
      \             'checkpoints_dir': checkpoints_dir,\n                        \
      \                     'model_dir'     : 'tfmodels',\n                      \
      \                       'train_path'     : train_dir,\n                    \
      \                         'val_path'       : val_dir,\n                    \
      \                         'batch_size'     : 32},\n                        \
      \             outputs=['model'])\n\n    # deploy the model using nuclio functions\n\
      \    deploy = funcs['serving'].deploy_step(models={model_name: train.outputs['model']})\n"
  artifacts:
  - key: images
    kind: ''
    iter: 0
    tree: latest
    target_path: http://iguazio-sample-data.s3.amazonaws.com/catsndogs.zip
    db_key: images
  artifact_path: /v3io/projects/{{run.project}}/artifacts
  source: ''
  subpath: ''
  origin_url: ''
  desired_state: online
