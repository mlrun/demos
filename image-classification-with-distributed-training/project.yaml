name: cat-and-dog-servers
functions:
- name: utils
  spec:
    kind: job
    metadata:
      name: utils
      tag: ''
      project: cat-and-dog-servers
    spec:
      command: ''
      args: []
      image: mlrun/mlrun
      env: []
      default_handler: ''
      entry_points:
        open_archive:
          name: open_archive
          doc: 'Open a file/object archive into a target directory


            Currently supports zip and tar.gz'
          parameters:
          - name: context
            doc: function execution context
            default: ''
          - name: archive_url
            type: DataItem
            doc: url of archive file
            default: ''
          - name: target_path
            doc: file system path to store extracted files
            default: ''
          - name: refresh
            default: false
          - name: train_size
            default: 0.8
          outputs:
          - default: ''
          lineno: 19
      description: ''
      build:
        functionSourceCode: IyBHZW5lcmF0ZWQgYnkgbnVjbGlvLmV4cG9ydC5OdWNsaW9FeHBvcnRlcgoKaW1wb3J0IG9zCmltcG9ydCB6aXBmaWxlCmltcG9ydCBqc29uCmltcG9ydCBzaHV0aWwKZnJvbSBnbG9iIGltcG9ydCBnbG9iCmZyb20gdGVtcGZpbGUgaW1wb3J0IG1rdGVtcAppbXBvcnQgcGFuZGFzIGFzIHBkCmltcG9ydCBudW1weSBhcyBucApmcm9tIG1scnVuIGltcG9ydCBEYXRhSXRlbQoKZGVmIF9leHRyYWN0X2NhdGVnb3J5KGZpbGVuYW1lKToKICAgICAgICByZXR1cm4gb3MucGF0aC5iYXNlbmFtZShmaWxlbmFtZSkuc3BsaXQoJy4nKVswXQoKZGVmIF9leHRyYWN0X2RldGF0c2V0KGksIHBlcl9jbGFzcyk6CiAgICAgICAgcmV0dXJuICd0cmFpbicgaWYgaSA8PSBwZXJfY2xhc3MgZWxzZSAndmFsaWRhdGlvbicKICAgIApkZWYgb3Blbl9hcmNoaXZlKGNvbnRleHQsIAogICAgICAgICAgICAgICAgIGFyY2hpdmVfdXJsOiBEYXRhSXRlbSwKICAgICAgICAgICAgICAgICB0YXJnZXRfcGF0aCwKICAgICAgICAgICAgICAgICByZWZyZXNoPUZhbHNlLAogICAgICAgICAgICAgICAgIHRyYWluX3NpemU9MC44KToKICAgICIiIk9wZW4gYSBmaWxlL29iamVjdCBhcmNoaXZlIGludG8gYSB0YXJnZXQgZGlyZWN0b3J5CiAgICAKICAgIEN1cnJlbnRseSBzdXBwb3J0cyB6aXAgYW5kIHRhci5negogICAgCiAgICA6cGFyYW0gY29udGV4dDogICAgICBmdW5jdGlvbiBleGVjdXRpb24gY29udGV4dAogICAgOnBhcmFtIGFyY2hpdmVfdXJsOiAgdXJsIG9mIGFyY2hpdmUgZmlsZQogICAgOnBhcmFtIHRhcmdldF9wYXRoOiAgZmlsZSBzeXN0ZW0gcGF0aCB0byBzdG9yZSBleHRyYWN0ZWQgZmlsZXMKICAgIDpwYXJhbSBrZXk6ICAgICAgICAgIGtleSBvZiBhcmNoaXZlIGNvbnRlbnRzIGluIGFydGlmYWN0IHN0b3JlCiAgICA6cGFyYW0gdGVzdF9zaXplOiAgICBzZXQgdGhlIHRyYWluIGRhdGFzZXQgc2l6ZSBvdXQgb2YgdG90YWwgZGF0YXNldAogICAgIiIiCiAgICBvcy5tYWtlZGlycyh0YXJnZXRfcGF0aCwgZXhpc3Rfb2s9VHJ1ZSkKICAgIAogICAgYXJjaGl2ZV91cmwgPSBhcmNoaXZlX3VybC5sb2NhbCgpCiAgICAKICAgIGNvbnRleHQubG9nZ2VyLmluZm8oJ0V4dHJhY3RpbmcgemlwJykKICAgIGV4dHJhY3Rpb25fcGF0aCA9IG9zLnBhdGguam9pbih0YXJnZXRfcGF0aCwgJ3RtcCcpCiAgICB6aXBfcmVmID0gemlwZmlsZS5aaXBGaWxlKGFyY2hpdmVfdXJsLCAncicpCiAgICB6aXBfcmVmLmV4dHJhY3RhbGwoZXh0cmFjdGlvbl9wYXRoKQogICAgCiAgICBmaWxlbmFtZXMgPSBbZmlsZSBmb3IgZmlsZSBpbiBnbG9iKGV4dHJhY3Rpb25fcGF0aCArICcvKi8qJykgaWYgZmlsZS5lbmRzd2l0aCgnLmpwZycpXQogICAgCiAgICAKICAgIAogICAgZmlsZV9jbGFzc2VzID0gW19leHRyYWN0X2NhdGVnb3J5KGZpbGUpIGZvciBmaWxlIGluIGZpbGVuYW1lc10KICAgIGNsYXNzZXMsIGNsYXNzX2NvdW50cyA9IG5wLnVuaXF1ZShmaWxlX2NsYXNzZXMsIHJldHVybl9jb3VudHM9VHJ1ZSkKICAgIGZpbGVzID0ge2M6IFtdIGZvciBjIGluIGNsYXNzZXN9CiAgICBmb3IgbGFiZWwsIGZpbGUgaW4gemlwKGZpbGVfY2xhc3NlcywgZmlsZW5hbWVzKToKICAgICAgICBmaWxlc1tsYWJlbF0uYXBwZW5kKGZpbGUpCiAgICAKICAgIG51bV9maWxlcyA9IGxlbihmaWxlbmFtZXMpCiAgICBudW1fdHJhaW4gPSBpbnQobnAuY2VpbChudW1fZmlsZXMgKiB0cmFpbl9zaXplKSkKICAgIG51bV9zYW1wbGVzX3Blcl9jbGFzcyA9IGludChucC5jZWlsKG51bV90cmFpbiAvIGxlbihjbGFzc2VzKSkpCiAgICAKICAgIGZvciBjYXRlZ29yeSBpbiBjbGFzc2VzOgogICAgICAgIHRyYWluX2RpciA9IG9zLnBhdGguam9pbih0YXJnZXRfcGF0aCwgInRyYWluIiwgY2F0ZWdvcnkpCiAgICAgICAgdmFsaWRhdGlvbl9kaXIgPSBvcy5wYXRoLmpvaW4odGFyZ2V0X3BhdGgsICJ2YWxpZGF0aW9uIiwgY2F0ZWdvcnkpCiAgICAgICAgb3MubWFrZWRpcnModHJhaW5fZGlyLCBleGlzdF9vaz1UcnVlKQogICAgICAgIG9zLm1ha2VkaXJzKHZhbGlkYXRpb25fZGlyLCBleGlzdF9vaz1UcnVlKQogICAgCiAgICBmb3IgbGFiZWwsIGZpbGVuYW1lcyBpbiBmaWxlcy5pdGVtcygpOgogICAgICAgIGZvciBpLCBmaWxlIGluIGVudW1lcmF0ZShmaWxlbmFtZXMpOgogICAgICAgICAgICBzaHV0aWwubW92ZShmaWxlLCBvcy5wYXRoLmpvaW4odGFyZ2V0X3BhdGgsIF9leHRyYWN0X2RldGF0c2V0KGksIG51bV9zYW1wbGVzX3Blcl9jbGFzcyksIGxhYmVsLCBvcy5wYXRoLmJhc2VuYW1lKGZpbGUpKSkKICAgIHNodXRpbC5ybXRyZWUoZXh0cmFjdGlvbl9wYXRoKQoKICAgIGNvbnRleHQubG9nZ2VyLmluZm8oZidleHRyYWN0ZWQgYXJjaGl2ZSB0byB7dGFyZ2V0X3BhdGh9JykKICAgIGNvbnRleHQubG9nZ2VyLmluZm8oZidEYXRhc2V0IGNvbnRhaW5lciB0aGUgY2xhc3NlcyB7Y2xhc3Nlc30nKQogICAgY29udGV4dC5sb2dfYXJ0aWZhY3QoJ2NvbnRlbnQnLCB0YXJnZXRfcGF0aD10YXJnZXRfcGF0aCkKCg==
        commands: []
        code_origin: https://github.com/mlrun/demos#7a289794440456d4f3a93969a528b318b1f4d59e:utils.ipynb
- name: trainer
  spec:
    kind: mpijob
    metadata:
      name: trainer
      project: cat-and-dog-servers
      categories: []
    spec:
      command: /User/mlrun-demos/demos/image-classification-with-distributed-training/src-tfv2/horovod-training.py
      args: []
      image: mlrun/ml-models-gpu
      env: []
      resources:
        limits:
          nvidia.com/gpu: 1
      description: ''
      replicas: 2
      build:
        commands: []
- url: hub://tf2_serving
  name: serving
workflows:
- name: main
  code: "from kfp import dsl\nfrom mlrun import mount_v3io\n\nfuncs = {}\n\n\ndef\
    \ init_functions(functions: dict, project=None, secrets=None):\n    '''\n    This\
    \ function will run before running the project.\n    It allows us to add our specific\
    \ system configurations to the functions\n    like mounts or secrets if needed.\n\
    \n    In this case we will add Iguazio's user mount to our functions using the\n\
    \    `mount_v3io()` function to automatically set the mount with the needed\n\
    \    variables taken from the environment. \n    * mount_v3io can be replaced\
    \ with mlrun.platforms.mount_pvc() for \n    non-iguazio mount\n\n    @param functions:\
    \ <function_name: function_yaml> dict of functions in the\n                  \
    \      workflow\n    @param project: project object\n    @param secrets: secrets\
    \ required for the functions for s3 connections and\n                    such\n\
    \    '''\n    for f in functions.values():\n        f.apply(mount_v3io())    \
    \              # On Iguazio (Auto-mount /User)\n        # f.apply(mlrun.platforms.mount_pvc())\
    \ # Non-Iguazio mount\n        \n    functions['serving'].set_env('MODEL_CLASS',\
    \ 'TFModel')\n    functions['serving'].set_env('IMAGE_HEIGHT', '224')\n    functions['serving'].set_env('IMAGE_WIDTH',\
    \ '224')\n    functions['serving'].set_env('ENABLE_EXPLAINER', 'False')\n    functions['serving'].spec.min_replicas\
    \ = 1\n\n\n@dsl.pipeline(\n    name='Image classification demo',\n    description='Train\
    \ an Image Classification TF Algorithm using MLRun'\n)\ndef kfpipeline(\n    \
    \    image_archive='store:///images',\n        images_dir='/User/artifacts/images',\n\
    \        checkpoints_dir='/User/artifacts/models/checkpoints',\n        model_name='cat_vs_dog_tfv1',\n\
    \        epochs=2):\n\n    # step 1: download and prep images\n    open_archive\
    \ = funcs['utils'].as_step(name='download',\n                                \
    \          handler='open_archive',\n                                         \
    \ params={'target_path': images_dir},\n                                      \
    \    inputs={'archive_url': image_archive},\n                                \
    \          outputs=['content'])\n\n    # step 2: train the model\n    train_dir\
    \ = str(open_archive.outputs['content']) + '/train'\n    val_dir = str(open_archive.outputs['content'])\
    \ + '/validation'\n    train = funcs['trainer'].as_step(name='train',\n      \
    \                               params={'epochs': epochs,\n                  \
    \                           'checkpoints_dir': checkpoints_dir,\n            \
    \                                 'model_dir'     : 'tfmodels',\n            \
    \                                 'train_path'     : train_dir,\n            \
    \                                 'val_path'       : val_dir,\n              \
    \                               'batch_size'     : 32},\n                    \
    \                 outputs=['model'])\n\n    # deploy the model using nuclio functions\n\
    \    deploy = funcs['serving'].deploy_step(models={model_name: train.outputs['model']})\n"
artifacts:
- key: images
  kind: ''
  iter: 0
  tree: latest
  target_path: http://iguazio-sample-data.s3.amazonaws.com/catsndogs.zip
  db_key: images
artifact_path: /User/artifacts
