name: cat-and-dog-servers
functions:
- name: utils
  spec:
    kind: job
    metadata:
      name: utils
      tag: ''
      hash: 09c8a9fdba38ec7e24a1085ae4c3e767353ee855
      project: cat-and-dog-servers
      categories: []
    spec:
      command: ''
      args: []
      image: mlrun/mlrun
      env:
      - name: V3IO_API
        value: ''
      - name: V3IO_USERNAME
        value: ''
      - name: V3IO_ACCESS_KEY
        value: ''
      default_handler: ''
      entry_points:
        open_archive:
          name: open_archive
          doc: 'Open a file/object archive into a target directory


            Currently supports zip and tar.gz'
          parameters:
          - name: context
            doc: function execution context
          - name: archive_url
            type: DataItem
            doc: url of archive file
          - name: target_path
            doc: path within artifact store where extracted files are stored
          - name: refresh
          outputs: []
          lineno: 10
        categories_map_builder:
          name: categories_map_builder
          doc: 'Read labeled images from a directory and create category map + df


            filename format: <category>.NN.jpg'
          parameters:
          - name: context
          - name: source_dir
          - name: df_filename
            default: file_categories_df.csv
          - name: map_filename
            default: categories_map.json
          outputs: []
          lineno: 37
      description: ''
      build:
        functionSourceCode: IyBHZW5lcmF0ZWQgYnkgbnVjbGlvLmV4cG9ydC5OdWNsaW9FeHBvcnRlcgoKaW1wb3J0IG9zCmltcG9ydCB6aXBmaWxlCmltcG9ydCBqc29uCmZyb20gdGVtcGZpbGUgaW1wb3J0IG1rdGVtcAppbXBvcnQgcGFuZGFzIGFzIHBkCmZyb20gbWxydW4gaW1wb3J0IERhdGFJdGVtCgpkZWYgb3Blbl9hcmNoaXZlKGNvbnRleHQsIAogICAgICAgICAgICAgICAgIGFyY2hpdmVfdXJsOiBEYXRhSXRlbSwKICAgICAgICAgICAgICAgICB0YXJnZXRfcGF0aCwKICAgICAgICAgICAgICAgICByZWZyZXNoPUZhbHNlKToKICAgICIiIk9wZW4gYSBmaWxlL29iamVjdCBhcmNoaXZlIGludG8gYSB0YXJnZXQgZGlyZWN0b3J5CiAgICAKICAgIEN1cnJlbnRseSBzdXBwb3J0cyB6aXAgYW5kIHRhci5negogICAgCiAgICA6cGFyYW0gY29udGV4dDogICAgICBmdW5jdGlvbiBleGVjdXRpb24gY29udGV4dAogICAgOnBhcmFtIGFyY2hpdmVfdXJsOiAgdXJsIG9mIGFyY2hpdmUgZmlsZQogICAgOnBhcmFtIHRhcmdldF9wYXRoOiAgcGF0aCB3aXRoaW4gYXJ0aWZhY3Qgc3RvcmUgd2hlcmUgZXh0cmFjdGVkIGZpbGVzCiAgICAgICAgICAgICAgICAgICAgICAgICBhcmUgc3RvcmVkCiAgICA6cGFyYW0ga2V5OiAgICAgICAgICBrZXkgb2YgYXJjaGl2ZSBjb250ZW50cyBpbiBhcnRpZmFjdCBzdG9yZQogICAgIiIiCiAgICBvcy5tYWtlZGlycyh0YXJnZXRfcGF0aCwgZXhpc3Rfb2s9VHJ1ZSkKICAgIAogICAgYXJjaGl2ZV91cmwgPSBhcmNoaXZlX3VybC5sb2NhbCgpCiAgICAKICAgIGNvbnRleHQubG9nZ2VyLmluZm8oJ0V4dHJhY3RpbmcgemlwJykKICAgIHppcF9yZWYgPSB6aXBmaWxlLlppcEZpbGUoYXJjaGl2ZV91cmwsICdyJykKICAgIHppcF9yZWYuZXh0cmFjdGFsbCh0YXJnZXRfcGF0aCkKICAgIHppcF9yZWYuY2xvc2UoKQogICAgCiAgICBjb250ZXh0LmxvZ2dlci5pbmZvKGYnZXh0cmFjdGVkIGFyY2hpdmUgdG8ge3RhcmdldF9wYXRofScpCiAgICBjb250ZXh0LmxvZ19hcnRpZmFjdCgnY29udGVudCcsIHRhcmdldF9wYXRoPXRhcmdldF9wYXRoKQoKICAgIApkZWYgY2F0ZWdvcmllc19tYXBfYnVpbGRlcihjb250ZXh0LAogICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VfZGlyLAogICAgICAgICAgICAgICAgICAgICAgICAgICBkZl9maWxlbmFtZT0nZmlsZV9jYXRlZ29yaWVzX2RmLmNzdicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcF9maWxlbmFtZT0nY2F0ZWdvcmllc19tYXAuanNvbicpOgogICAgIiIiUmVhZCBsYWJlbGVkIGltYWdlcyBmcm9tIGEgZGlyZWN0b3J5IGFuZCBjcmVhdGUgY2F0ZWdvcnkgbWFwICsgZGYKICAgIAogICAgZmlsZW5hbWUgZm9ybWF0OiA8Y2F0ZWdvcnk+Lk5OLmpwZyIiIgogICAgCiAgICBmaWxlbmFtZXMgPSBbZmlsZSBmb3IgZmlsZSBpbiBvcy5saXN0ZGlyKHNvdXJjZV9kaXIpIGlmIGZpbGUuZW5kc3dpdGgoJy5qcGcnKV0KICAgIGNhdGVnb3JpZXMgPSBbXQogICAgICAgIAogICAgZm9yIGZpbGVuYW1lIGluIGZpbGVuYW1lczoKICAgICAgICBjYXRlZ29yeSA9IGZpbGVuYW1lLnNwbGl0KCcuJylbMF0KICAgICAgICBjYXRlZ29yaWVzLmFwcGVuZChjYXRlZ29yeSkKCiAgICBkZiA9IHBkLkRhdGFGcmFtZSh7CiAgICAgICAgJ2ZpbGVuYW1lJzogZmlsZW5hbWVzLAogICAgICAgICdjYXRlZ29yeSc6IGNhdGVnb3JpZXMKICAgIH0pCiAgICBkZlsnY2F0ZWdvcnknXSA9IGRmWydjYXRlZ29yeSddLmFzdHlwZSgnc3RyJykKICAgIAogICAgY2F0ZWdvcmllcyA9IGRmLmNhdGVnb3J5LnVuaXF1ZSgpCiAgICBjYXRlZ29yaWVzID0ge2k6IGNhdGVnb3J5IGZvciBpLCBjYXRlZ29yeSBpbiBlbnVtZXJhdGUoY2F0ZWdvcmllcyl9CiAgICB3aXRoIG9wZW4ob3MucGF0aC5qb2luKGNvbnRleHQuYXJ0aWZhY3RfcGF0aCwgbWFwX2ZpbGVuYW1lKSwgJ3cnKSBhcyBmOgogICAgICAgIGYud3JpdGUoanNvbi5kdW1wcyhjYXRlZ29yaWVzKSkKICAgICAgICAKICAgIGNvbnRleHQubG9nZ2VyLmluZm8oY2F0ZWdvcmllcykKICAgIGNvbnRleHQubG9nX2FydGlmYWN0KCdjYXRlZ29yaWVzX21hcCcsIGxvY2FsX3BhdGg9bWFwX2ZpbGVuYW1lKQogICAgY29udGV4dC5sb2dfZGF0YXNldCgnZmlsZV9jYXRlZ29yaWVzJywgZGY9ZGYsIGxvY2FsX3BhdGg9ZGZfZmlsZW5hbWUpCgo=
        commands: []
        code_origin: https://github.com/yjb-ds/demos.git#da22736ef1ea1bf3ddbd8f74444849b4c3ecc241
- name: trainer
  spec:
    kind: mpijob
    metadata:
      name: trainer
      project: cat-and-dog-servers
      categories: []
    spec:
      command: /User/repos/demos/horovod-pipe/src-tfv2/horovod-training.py
      args: []
      image: mlrun/ml-models
      env: []
      description: ''
      replicas: 4
      build:
        commands: []
- url: hub://tf2_serving
  name: serving
workflows:
- name: main
  code: "from kfp import dsl\nfrom mlrun import mount_v3io\n\nfuncs = {}\n\n\ndef\
    \ init_functions(functions: dict, project=None, secrets=None):\n    '''\n    This\
    \ function will run before running the project.\n    It allows us to add our specific\
    \ system configurations to the functions\n    like mounts or secrets if needed.\n\
    \n    In this case we will add Iguazio's user mount to our functions using the\n\
    \    `mount_v3io()` function to automatically set the mount with the needed\n\
    \    variables taken from the environment. \n    * mount_v3io can be replaced\
    \ with mlrun.platforms.mount_pvc() for \n    non-iguazio mount\n\n    @param functions:\
    \ <function_name: function_yaml> dict of functions in the\n                  \
    \      workflow\n    @param project: project object\n    @param secrets: secrets\
    \ required for the functions for s3 connections and\n                    such\n\
    \    '''\n    for f in functions.values():\n        f.apply(mount_v3io())    \
    \              # On Iguazio (Auto-mount /User)\n        # f.apply(mlrun.platforms.mount_pvc())\
    \ # Non-Iguazio mount\n        \n    functions['serving'].set_env('MODEL_CLASS',\
    \ 'TFModel')\n    functions['serving'].set_env('IMAGE_HEIGHT', '128')\n    functions['serving'].set_env('IMAGE_WIDTH',\
    \ '128')\n    functions['serving'].set_env('ENABLE_EXPLAINER', 'False')\n\n\n\
    @dsl.pipeline(\n    name='Image classification demo',\n    description='Train\
    \ an Image Classification TF Algorithm using MLRun'\n)\ndef kfpipeline(\n    \
    \    image_archive='store:///images',\n        images_dir='/User/artifacts/images',\n\
    \        checkpoints_dir='/User/artifacts/models/checkpoints',\n        model_name='cat_vs_dog_tfv1'):\n\
    \n    # step 1: download images\n    open_archive = funcs['utils'].as_step(name='download',\n\
    \                                          handler='open_archive',\n         \
    \                                 params={'target_path': images_dir},\n      \
    \                                    inputs={'archive_url': image_archive},\n\
    \                                          outputs=['content'])\n\n    # step\
    \ 2: label images\n    source_dir = str(open_archive.outputs['content']) + '/cats_n_dogs'\n\
    \    label = funcs['utils'].as_step(name='label',\n                          \
    \         handler='categories_map_builder',\n                                \
    \   params={'source_dir': source_dir},\n                                   outputs=['categories_map',\n\
    \                                            'file_categories'])\n\n    # step\
    \ 3: train the model\n    train = funcs['trainer'].as_step(name='train',\n   \
    \                                  params={'epochs': 4,\n                    \
    \                         'checkpoints_dir': checkpoints_dir,\n              \
    \                               'data_path'      : source_dir,\n             \
    \                                'model_dir'     : 'tfmodels',\n             \
    \                                'batch_size'     : 256},\n                  \
    \                   inputs={\n                                         'categories_map':\
    \ label.outputs['categories_map'],\n                                         'file_categories':\
    \ label.outputs['file_categories']},\n                                     outputs=['model'])\n\
    \    train.container.set_image_pull_policy('Always')\n\n    # deploy the model\
    \ using nuclio functions\n    deploy = funcs['serving'].deploy_step(models={model_name:\
    \ train.outputs['model']})\n"
artifacts:
- key: images
  kind: ''
  iter: 0
  tree: latest
  target_path: http://iguazio-sample-data.s3.amazonaws.com/catsndogs.zip
  db_key: images
